generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @default(cuid()) @id
  name          String?
  username      String?    @unique
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  profile       Profile?
  accounts      Account[]
  services      ServicePost[]
  jobs          JobPost[]
  createdAt     DateTime?  @default(now()) @map(name: "created_at")
}

model Profile {
  id            String    @default(cuid()) @id
  userId        String    @unique
  name          String
  bio           String
  image         String
  skills        String
  country       String
  address       String
  user          User @relation(fields: [userId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ServicePost {
  id              String    @default(cuid()) @id
  userId          String
  title           String
  description     String 
  tags            String
  price           Int
  time            Int
  category        String    @default("development-and-it") 
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobPost {
  id              String    @default(cuid()) @id
  userId          String
  title           String
  description     String 
  skills          String
  experience      String
  price           Int
  location        String
  category        String    @default("development-and-it") 
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id              String @id @default(cuid())
  email           String
  token           String @unique
  expires         DateTime

  @@unique([email, token])
}